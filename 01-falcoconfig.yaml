apiVersion: v1
kind: ConfigMap
metadata:
  name: falco-config
data:
  falco.yaml: |
    # File containing Falco rules, loaded at startup.
    rules_file: /etc/falco/falco_rules.yaml

    # Whether to output events in json or text
    json_output: true

    # Send information logs to stderr and/or syslog Note these are *not* security
    # notification logs! These are just Falco lifecycle (and possibly error) logs.
    log_stderr: true
    log_syslog: true

    # Minimum log level to include in logs. Note: these levels are
    # separate from the priority field of rules. This refers only to the
    # log level of falco's internal logging. Can be one of "emergency",
    # "alert", "critical", "error", "warning", "notice", "info", "debug".
    log_level: info

    # A throttling mechanism implemented as a token bucket limits the
    # rate of falco notifications. This throttling is controlled by the following configuration
    # options:
    #  - rate: the number of tokens (i.e. right to send a notification)
    #    gained per second. Defaults to 1.
    #  - max_burst: the maximum number of tokens outstanding. Defaults to 1000.
    #
    # With these defaults, falco could send up to 1000 notifications after
    # an initial quiet period, and then up to 1 notification per second
    # afterward. It would gain the full burst back after 1000 seconds of
    # no activity.

    outputs:
      rate: 1
      max_burst: 1000

    # Where security notifications should go.
    # Multiple outputs can be enabled.

    syslog_output:
      enabled: true

    file_output:
      enabled: false
      filename: ./events.txt

    stdout_output:
      enabled: true

    # program_output:
    #   enabled: true
    #   program: "nc falcobot 8089"

  falco_rules.yaml: |
    #############
    # Definitions
    #############

    # File actions

    - macro: open_write
      condition: (evt.type=open or evt.type=openat) and evt.is_open_write=true and fd.typechar='f'

    - macro: open_read
      condition: (evt.type=open or evt.type=openat) and evt.is_open_read=true and fd.typechar='f'

    - macro: rename
      condition: evt.type = rename
    - macro: mkdir
      condition: evt.type = mkdir
    - macro: remove
      condition: evt.type in (rmdir, unlink, unlinkat)

    - macro: modify
      condition: rename or remove

    - macro: spawned_process
      condition: evt.type = execve and evt.dir=<

    # File categories
    - macro: terminal_file_fd
      condition: fd.name=/dev/ptmx or fd.name startswith /dev/pts

    - macro: bin_dir
      condition: fd.directory in (/bin, /sbin, /usr/bin, /usr/sbin)

    - macro: bin_dir_mkdir
      condition: evt.arg[0] startswith /bin/ or evt.arg[0] startswith /sbin/ or evt.arg[0] startswith /usr/bin/ or evt.arg[0] startswith /usr/sbin/
    - macro: bin_dir_rename
      condition: evt.arg[1] startswith /bin/ or evt.arg[1] startswith /sbin/ or evt.arg[1] startswith /usr/bin/ or evt.arg[1] startswith /usr/sbin/

    - macro: etc_dir
      condition: fd.name startswith /etc

    - macro: ubuntu_so_dirs
      condition: fd.name startswith /lib/x86_64-linux-gnu or fd.name startswith /usr/lib/x86_64-linux-gnu or fd.name startswith /usr/lib/sudo
    - macro: centos_so_dirs
      condition: fd.name startswith /lib64 or fd.name startswith /usr/lib64 or fd.name startswith /usr/libexec
    - macro: linux_so_dirs
      condition: ubuntu_so_dirs or centos_so_dirs or fd.name=/etc/ld.so.cache

    - list: shell_binaries
      items: [bash, csh, ksh, sh, tcsh, zsh, dash]

    - macro: shell_procs
      condition: proc.name in (shell_binaries)

    - list: coreutils_binaries
      items: [
        truncate, sha1sum, numfmt, fmt, fold, uniq, cut, who,
        groups, csplit, sort, expand, printf, printenv, unlink, tee, chcon, stat,
        basename, split, nice, "yes", whoami, sha224sum, hostid, users, stdbuf,
        base64, unexpand, cksum, od, paste, nproc, pathchk, sha256sum, wc, test,
        comm, arch, du, factor, sha512sum, md5sum, tr, runcon, env, dirname,
        tsort, join, shuf, install, logname, pinky, nohup, expr, pr, tty, timeout,
        tail, "[", seq, sha384sum, nl, head, id, mkfifo, sum, dircolors, ptx, shred,
        tac, link, chroot, vdir, chown, touch, ls, dd, uname, "true", pwd, date,
        chgrp, chmod, mktemp, cat, mknod, sync, ln, "false", rm, mv, cp, echo,
        readlink, sleep, stty, mkdir, df, dir, rmdir, touch
        ]

    # dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr "\\n" ","
    - list: login_binaries
      items: [login, systemd, systemd-logind, su, nologin, faillog, lastlog, newgrp, sg]

    # dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr "\\n" ","
    - list: passwd_binaries
      items: [
        shadowconfig, grpck, pwunconv, grpconv, pwck,
        groupmod, vipw, pwconv, useradd, newusers, cppw, chpasswd, usermod,
        groupadd, groupdel, grpunconv, chgpasswd, userdel, chage, chsh,
        gpasswd, chfn, expiry, passwd, vigr, cpgr
        ]

    # repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr "\\n" ","
    - list: shadowutils_binaries
      items: [
        chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,
        groupadd, groupdel, addgroup, delgroup, groupmems, groupmod, grpck, grpconv, grpunconv,
        newusers, pwck, pwconv, pwunconv, useradd, userdel, usermod, vigr, vipw, unix_chkpwd
        ]

    - list: sysdigcloud_binaries
      items: [setup-backend, dragent, sdchecks]

    - list: docker_binaries
      items: [docker, dockerd, exe]

    - list: k8s_binaries
      items: [hyperkube, skydns, kube2sky, exechealthz]

    - list: http_server_binaries
      items: [nginx, httpd, httpd-foregroun, lighttpd]

    - list: db_server_binaries
      items: [mysqld]

    - macro: server_procs
      condition: proc.name in (http_server_binaries, db_server_binaries, docker_binaries, sshd)

    # The truncated dpkg-preconfigu is intentional, process names are
    # truncated at the sysdig level.
    - list: package_mgmt_binaries
      items: [dpkg, dpkg-preconfigu, dnf, rpm, rpmkey, yum, frontend]

    - macro: package_mgmt_procs
      condition: proc.name in (package_mgmt_binaries)

    - list: ssl_mgmt_binaries
      items: [ca-certificates]

    - list: dhcp_binaries
      items: [dhclient, dhclient-script]

    # A canonical set of processes that run other programs with different
    # privileges or as a different user.
    - list: userexec_binaries
      items: [sudo, su]

    - list: user_mgmt_binaries
      items: [login_binaries, passwd_binaries, shadowutils_binaries]

    - macro: system_procs
      condition: proc.name in (coreutils_binaries, user_mgmt_binaries)

    - list: mail_binaries
      items: [sendmail, sendmail-msp, postfix, procmail, exim4]

    - macro: sensitive_files
      condition: fd.name startswith /etc and (fd.name in (/etc/shadow, /etc/sudoers, /etc/pam.conf) or fd.directory in (/etc/sudoers.d, /etc/pam.d))

    # Indicates that the process is new. Currently detected using time
    # since process was started, using a threshold of 5 seconds.
    - macro: proc_is_new
      condition: proc.duration <= 5000000000

    # Network
    - macro: inbound
      condition: ((evt.type=listen and evt.dir=>) or (evt.type=accept and evt.dir=<))

    # Currently sendto is an ignored syscall, otherwise this could also check for (evt.type=sendto and evt.dir=>)
    - macro: outbound
      condition: evt.type=connect and evt.dir=< and (fd.typechar=4 or fd.typechar=6)

    - macro: ssh_port
      condition: fd.lport=22

    # Ssh
    - macro: ssh_error_message
      condition: (evt.arg.data contains "Invalid user" or evt.arg.data contains "preauth" or evt.arg.data contains "Failed password")

    # System
    - macro: modules
      condition: evt.type in (delete_module, init_module)

    # Use this to test whether the event occurred within a container.

    # When displaying container information in the output field, use
    # %container.info, without any leading term (file=%fd.name
    # %container.info user=%user.name, and not file=%fd.name
    # container=%container.info user=%user.name). The output will change
    # based on the context and whether or not -pk/-pm/-pc was specified on
    # the command line.
    - macro: container
      condition: container.id != host
    - macro: interactive
      condition: ((proc.aname=sshd and proc.name != sshd) or proc.name=systemd-logind or proc.name=login)
    - macro: syslog
      condition: fd.name in (/dev/log, /run/systemd/journal/syslog)
    - list: cron_binaries
      items: [cron, crond]

    # System users that should never log into a system. Consider adding your own
    # service users (e.g. 'apache' or 'mysqld') here.
    - macro: system_users
      condition: user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data)


    ###############
    # General Rules
    ###############

    - rule: Write below binary dir
      desc: an attempt to write to any file below a set of binary directories
      condition: bin_dir and evt.dir = < and open_write and not package_mgmt_procs
      output: "File below a known binary directory opened for writing (user=%user.name command=%proc.cmdline file=%fd.name)"
      priority: WARNING

    - macro: write_etc_common
      condition: >
        etc_dir and evt.dir = < and open_write
        and not proc.name in (shadowutils_binaries, sysdigcloud_binaries, package_mgmt_binaries, ssl_mgmt_binaries, dhcp_binaries, ldconfig.real, ldconfig)
        and not proc.pname in (sysdigcloud_binaries)

    - rule: Write below etc
      desc: an attempt to write to any file below /etc, not in a pipe installer session
      condition: write_etc_common
      output: "File below /etc opened for writing (user=%user.name command=%proc.cmdline file=%fd.name)"
      priority: WARNING

    - rule: Read sensitive file trusted after startup
      desc: an attempt to read any sensitive file (e.g. files containing user/password/authentication information) by a trusted program after startup. Trusted programs might read these files at startup to load initial state, but not afterwards.
      condition: sensitive_files and open_read and server_procs and not proc_is_new and proc.name!="sshd"
      output: "Sensitive file opened for reading by trusted program after startup (user=%user.name command=%proc.cmdline file=%fd.name)"
      priority: WARNING

    - rule: Read sensitive file untrusted
      desc: an attempt to read any sensitive file (e.g. files containing user/password/authentication information). Exceptions are made for known trusted programs.
      condition: sensitive_files and open_read and not proc.name in (user_mgmt_binaries, userexec_binaries, package_mgmt_binaries, cron_binaries, iptables, ps, lsb_release, check-new-relea, dumpe2fs, accounts-daemon, shell_binaries, sshd) and not proc.cmdline contains /usr/bin/mandb
      output: "Sensitive file opened for reading by non-trusted program (user=%user.name name=%proc.name command=%proc.cmdline file=%fd.name)"
      priority: WARNING

    - rule: Modify binary dirs
      desc: an attempt to modify any file below a set of binary directories.
      condition: bin_dir_rename and modify and not package_mgmt_procs
      output: "File below known binary directory renamed/removed (user=%user.name command=%proc.cmdline operation=%evt.type file=%fd.name %evt.args)"
      priority: WARNING

    - rule: Mkdir binary dirs
      desc: an attempt to create a directory below a set of binary directories.
      condition: mkdir and bin_dir_mkdir and not package_mgmt_procs
      output: "Directory below known binary directory created (user=%user.name command=%proc.cmdline directory=%evt.arg.path)"
      priority: WARNING

    # Audit all commands run in shells
    - rule: Shell commands
      desc: Running commands in a shell
      condition: >
        spawned_process
        and proc.pname exists and proc.pname
          in (shell_binaries, userexec_binaries, sshd, docker_binaries, k8s_binaries,
              tmux, screen, systemd, fbash)
          and not (k8s.ns.name=kube-system and k8s.pod.name startswith "kube-dns")
          and not (container.image startswith gcr.io/google_containers/exechealthz and proc.name = nslookup)
          and not (proc.cmdline startswith "nc")
      output: (uid=%user.uid pname=%proc.pname cmdline=%proc.cmdline ns=%k8s.ns.name cwd=%proc.cwd container=%container.info)
      priority: INFO

    # sockfamily ip is to exclude certain processes (like 'groups') that communicate on unix-domain sockets
    - rule: System procs network activity
      desc: any network activity performed by system binaries that are not expected to send or receive any network traffic
      condition: (fd.sockfamily = ip and system_procs) and (inbound or outbound)
      output: "Known system binary sent/received network traffic (user=%user.name command=%proc.cmdline connection=%fd.name)"
      priority: CRITICAL

    # (we may need to add additional checks against false positives, see: https://bugs.launchpad.net/ubuntu/+source/rkhunter/+bug/86153)
    - rule: Create files below dev
      desc: creating any files below /dev other than known programs that manage devices. Some rootkits hide files in /dev.
      condition: fd.directory = /dev and (evt.type = creat or (evt.type = open and evt.arg.flags contains O_CREAT)) and proc.name != blkid and not fd.name in (/dev/null,/dev/stdin,/dev/stdout,/dev/stderr,/dev/tty)
      output: "File created below /dev by untrusted program (user=%user.name command=%proc.cmdline file=%fd.name)"
      priority: WARNING
